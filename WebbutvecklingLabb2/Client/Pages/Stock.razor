@page "/stock"
@using Microsoft.AspNetCore.Authorization
@using WebbutvecklingLabb2.Shared.DTOs
@attribute [Authorize]
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="container">
    <label>Search by Name or Product Number</label>
    <InputText @bind-Value="SearchString" @oninput="GetSearchFilterResults"></InputText>
</div>

<table class="table">
    <thead>
    <tr>
        <th></th>
        <th>Name</th>
        <th>Description</th>
        <th>Category</th>
        <th>Price</th>
        <th>Product Number</th>
        <th>Available</th>
    </tr>
    </thead>
    <tbody>

    <Virtualize Items="FilteredProductList" Context="product">
        <tr>

            <td>
                <img src="@product.ImageSource" alt="@product.ProductName image" width="100" height="100"/>
            </td>
            <td class="align-middle">
                @product.ProductName
            </td>
            <td class="align-middle">
                @product.ProductDescription
            </td>
            <td class="align-middle">
                @product.Category
            </td>
            <td class="align-middle">
                @product.Price
            </td>
            <td class="align-middle">
                @product.ProductNumber
            </td>
            <td class="align-middle">
                @product.IsAvailable
            </td>

        </tr>
    </Virtualize>

    </tbody>
</table>

<div class="container text-center">
    <button class="btn btn-primary" @onclick="CreateProductNavigateButton">Create Product</button>
    <button class="btn btn-primary" @onclick="EditProductNavigateButton">Edit Product</button>
</div>

@code {
    private List<ProductDto>? ProductList { get; set; } = new();
    private List<ProductDto>? FilteredProductList { get; set; } = new();
    private string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ProductList = await HttpClient.GetFromJsonAsync<List<ProductDto>>("products");
        FilteredProductList = ProductList;
        await base.OnInitializedAsync();
    }

    private void CreateProductNavigateButton()
    {
        NavigationManager.NavigateTo("createProduct");
    }

    private void EditProductNavigateButton(MouseEventArgs obj)
    {
        NavigationManager.NavigateTo("editProduct");
    }


    private void GetSearchFilterResults(ChangeEventArgs args)
    {
        SearchString = args.Value.ToString();
        FilteredProductList = ProductList.FindAll(p => p.ProductName.ToLower().Contains(SearchString.ToLower()) 
                                                       || p.ProductNumber.ToLower().Contains(SearchString.ToLower()));
    }

}